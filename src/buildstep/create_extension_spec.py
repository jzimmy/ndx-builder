"""
This file was autogenerated with the NWB extension builder app
"""

from pynwb.spec import *

ns = {{"namespace"}}
types = {{"types"}}
includes = {{"includes"}}

ns_path = ns["name"] + ".namespace.yaml"
ext_source = ns["name"] + ".extensions.yaml"


def gen_types(types):
    nwb_types = []
    for ty in types:
        kind, ty = tuple(ty)
        if kind == 'GROUP':
            nwb_types.append(gen_group_spec(ty))
        elif kind == 'DATASET':
            nwb_types.append(gen_dataset_spec(ty))
        else:
            raise Exception("Unknown type: %s" % kind)


def gen_group_spec(spec):
    spec["groups"] = [gen_group_spec(g) for g in spec["groups"]]
    spec["datasets"] = [gen_dataset_spec(d) for d in spec["datasets"]]
    spec["attributes"] = [gen_attribute_spec(a) for a in spec["attributes"]]
    spec["links"] = [gen_link_spec(l) for l in spec["links"]]
    return NWBGroupSpec(**spec)


def gen_dataset_spec(spec):
    spec["attributes"] = [gen_attribute_spec(a) for a in spec["attributes"]]
    spec["dtype"] = gen_dtype_spec(spec["dtype"])
    return NWBDatasetSpec(**spec)


def gen_attribute_spec(spec):
    spec["dtype"] = gen_dtype_spec(spec["dtype"])
    return NWBAttributeSpec(**spec)


def gen_dtype_spec(spec):
    if isinstance(spec, str):
        return spec
    elif isinstance(spec, dict) and ['target_type', 'region'] in spec:
        return NWBRefSpec(**spec)
    elif isinstance(spec, dict) and ['name', 'doc', 'dtype'] in spec:
        spec["dtype"] = [gen_dtype_spec(d) for d in spec["dtype"]]
        return NWBDtypeSpec(**spec)


def gen_link_spec(spec):
    return NWBLinkSpec(**spec)


def gen_namespace(ns):
    return NWBNamespaceBuilder(**ns)


ns_builder = gen_namespace(ns)

for incty, module in includes:
    ns_builder.include_type(incty, namespace="core")

ns_builder.add_spec(
    ext_source, [gen_types(ty) for ty in types]
)

ns_builder.export(ns_path)
